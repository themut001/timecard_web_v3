// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  employeeId   String    @unique @map("employee_id")
  name         String
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         Role      @default(EMPLOYEE)
  departmentId String    @map("department_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  department      Department        @relation(fields: [departmentId], references: [id])
  attendanceRecords AttendanceRecord[]
  requests        Request[]
  dailyReports    DailyReport[]
  managedDepartment Department? @relation("DepartmentManager")

  @@map("users")
}

model Department {
  id        String   @id @default(cuid())
  name      String
  managerId String   @map("manager_id")
  createdAt DateTime @default(now()) @map("created_at")

  manager   User   @relation("DepartmentManager", fields: [managerId], references: [id])
  employees User[]

  @@map("departments")
}

model AttendanceRecord {
  id         String           @id @default(cuid())
  userId     String           @map("user_id")
  date       DateTime         @db.Date
  clockIn    DateTime?        @map("clock_in")
  clockOut   DateTime?        @map("clock_out")
  breakTime  Int              @default(0) @map("break_time") // minutes
  totalHours Float            @default(0) @map("total_hours")
  status     AttendanceStatus @default(PRESENT)
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@map("attendance_records")
}

model Request {
  id         String        @id @default(cuid())
  userId     String        @map("user_id")
  type       RequestType
  startDate  DateTime      @map("start_date") @db.Date
  endDate    DateTime      @map("end_date") @db.Date
  reason     String
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now()) @map("created_at")
  approvedAt DateTime?     @map("approved_at")
  approvedBy String?       @map("approved_by")

  user User @relation(fields: [userId], references: [id])

  @@map("requests")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  notionId  String   @unique @map("notion_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tagEfforts TagEffort[]

  @@map("tags")
}

model DailyReport {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  date        DateTime @db.Date
  workContent String   @map("work_content")
  notes       String   @default("")
  totalHours  Float    @default(0) @map("total_hours")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user       User        @relation(fields: [userId], references: [id])
  tagEfforts TagEffort[]

  @@unique([userId, date])
  @@map("daily_reports")
}

model TagEffort {
  id             String   @id @default(cuid())
  dailyReportId  String   @map("daily_report_id")
  tagId          String   @map("tag_id")
  hours          Float
  createdAt      DateTime @default(now()) @map("created_at")

  dailyReport DailyReport @relation(fields: [dailyReportId], references: [id], onDelete: Cascade)
  tag         Tag         @relation(fields: [tagId], references: [id])

  @@unique([dailyReportId, tagId])
  @@map("tag_efforts")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

enum Role {
  EMPLOYEE
  ADMIN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EARLY_LEAVE
}

enum RequestType {
  LEAVE
  OVERTIME
  LATE
  EARLY_LEAVE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}